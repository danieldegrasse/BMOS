PROG=uart-echo

# Toolchain root
TOOLCHAIN=/usr
# Toolchain tools
CC=$(TOOLCHAIN)/bin/arm-none-eabi-gcc
LD=$(TOOLCHAIN)/bin/arm-none-eabi-ld
OBJCOPY=$(TOOLCHAIN)/bin/arm-none-eabi-objcopy

# Debugger command
OPENOCD=openocd -f /usr/share/openocd/scripts/board/stm32l4discovery.cfg

# Drivers directory
DRIVERS=drivers


# # Note that mthumb is required. Cortex M executes in T32 mode.
CFLAGS += -mcpu=cortex-m4 \
	-mthumb \
	-Wall \
	-Werror \
	-ffreestanding \
	-g \
	-isystem $(DRIVERS) \
	-nostartfiles
LDFLAGS += -Wl,-T linker_script.ld \
	-Wl,-Map=$(BUILDDIR)/$(PROG).map

# Build output directory
BUILDDIR=build

###### recursive wildcard function #######
rwildcard=$(wildcard $1$2) $(foreach d, $(wildcard $1*),$(call rwildcard,$d/,$2))

## All directories to search for source files
DIRS=$(DRIVERS)

# Add all .c files in current directory to compilation
SRCS=$(wildcard *.c)

# Recursively find all .c files in DIRS
SRCS+= $(foreach d, $(DIRS),$(call rwildcard,$(d),*.c))   


# Object files (autogenerated from sources)
OBJ=$(SRCS:%.c=%.o)
OBJDIR=$(BUILDDIR)/obj
_OBJ=$(patsubst %,$(OBJDIR)/%,$(OBJ))

all: $(BUILDDIR)/$(PROG).bin

# Output compiled object files into BUILDDIR
$(OBJDIR)/%.o: %.c
	@ [ -d $(dir $@) ] || mkdir -p $(dir $@)
	@ echo "[CC] $<"
	@ $(CC) $(CFLAGS) -c -o $@ $< 

$(BUILDDIR)/$(PROG).bin: $(BUILDDIR)/$(PROG).elf
	@ echo "Creating $@"
	@ $(OBJCOPY) -O binary $^ $@

$(BUILDDIR)/$(PROG).elf: $(_OBJ)
	@ echo "Linking $@"
	@ $(CC) -o $@ $^ $(CFLAGS) $(LDFLAGS)

##### Flash code to board using OpenOCD (0x08000000 is start of flash bank)
flash: $(BUILDDIR)/$(PROG).bin
	$(OPENOCD) -c "program $^ 0x08000000 reset exit"

## Start debugserver, which flashes the program at boot
debugserver: $(BUILDDIR)/$(PROG).bin
	$(OPENOCD) -c "program $^ 0x08000000 reset verify; reset init"

.PHONY: clean erase 

clean:
	rm -r $(BUILDDIR) 

##### Erase all flash memory from board using OpenOCD #####
erase:
	$(OPENOCD) -c "init; reset halt; stm32l4x mass_erase 0; exit"


